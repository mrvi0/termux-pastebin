name: Deploy Pastebin to Termux (h1)

on:
  push:
    branches:
      - main # Запускать при пуше в main

jobs:
  deploy:
    name: Deploy to h1 via SSH
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Получить всю историю

      - name: Setup SSH connection
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY_H1 }}

      - name: Add h1 host to known_hosts
        run: |
          mkdir -p ~/.ssh && chmod 700 ~/.ssh
          H1_HOST=${{ secrets.H1_WG_HOST }}
          echo "Scanning host ${H1_HOST} on port 8022..."
          ssh-keyscan -p 8022 -v ${H1_USER}@${H1_WG_HOST} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts
        shell: bash

      - name: Deploy to h1
        id: deploy_step # Даем ID шагу, чтобы получить его результат (success/failure)
        env:
          H1_USER: ${{ secrets.H1_USER }}
          H1_HOST: ${{ secrets.H1_WG_HOST }}
          DEPLOY_DIR: "/data/data/com.termux/files/home/termux-pastebin" # Путь на h1
          # Передаем данные для уведомлений
          COMMIT_SHA_SHORT: ${{ github.sha }} # Можно использовать github.sha[:7] для короткого хеша
          COMMIT_URL: ${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}
          ACTOR: ${{ github.actor }}
          REPO_URL: ${{ github.server_url }}/${{ github.repository }}
          RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          BRANCH: ${{ github.ref_name }}
        run: |
          echo "Connecting to ${H1_USER}@${H1_HOST}..."
          ssh -p 8022 "${H1_USER}@${H1_HOST}" << EOF
            echo "--- Running deployment script on h1 ---"
            cd "${DEPLOY_DIR}" || { echo "ERROR: Failed to cd to ${DEPLOY_DIR}"; exit 1; }

            echo "Attempting to stop existing process using stop.sh..."
            # Используем новый скрипт остановки
            bash scripts/stop.sh || echo "Stop script finished (may show errors if process wasn't running)."
            sleep 2

            echo "Updating code..."
            git fetch origin
            git reset --hard origin/main
            echo "Code updated."

            echo "Activating venv..."
            source "${DEPLOY_DIR}/venv/bin/activate" || { echo "ERROR: Failed to activate venv"; exit 1; }

            echo "Updating dependencies..."
            pip install -r requirements.txt
            echo "Dependencies updated."

            echo "Starting application using run_prod.sh..."
            chmod +x ./scripts/run_prod.sh
            # Запускаем в фоне, вывод идет в лог файл, указанный в скрипте
            nohup ./scripts/run_prod.sh &
            sleep 2 # Небольшая пауза после запуска

            # Простая проверка, что waitress запустился (ищет процесс)
            if pgrep -f "waitress-serve.*src.app:app" > /dev/null; then
              echo "Waitress process seems to be running."
            else
              echo "ERROR: Waitress process not found after start!"
              # Показываем последние строки лога waitress, если он есть
              if [ -f "pastebin-waitress.log" ]; then
                echo "--- Last lines of pastebin-waitress.log ---"
                tail -n 20 pastebin-waitress.log
                echo "----------------------------------------"
              fi
              exit 1 # Завершаем скрипт с ошибкой
            fi

            echo "--- Deployment script finished ---"
          EOF
        shell: bash

      # --- Уведомление об УСПЕХЕ ---
      - name: Send Telegram Message on Success
        if: success() # Запускается если deploy_step успешен
        uses: appleboy/telegram-action@v0.1.1
        with:
          to: ${{ secrets.TG_ALERT_CHAT }}
          token: ${{ secrets.TG_ALERT_TOKEN }}
          format: markdown
          # Используем контексты github и env напрямую здесь
          message: |
            ✅ *Pastebin Deploy Success!*
            Branch: `${{ github.ref_name }}`
            Commit: [`${{ github.sha }}`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}) by `${{ github.actor }}`
            Project: [${{ github.repository }}](${{ github.server_url }}/${{ github.repository }})
            Target: Termux (h1 - ${{ secrets.H1_WG_HOST }})
            Workflow: [Run #${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

      # --- Уведомление о НЕУДАЧЕ ---
      - name: Send Telegram Message on Failure
        if: failure() # Запускается если deploy_step или любой предыдущий шаг упал
        uses: appleboy/telegram-action@v0.1.1
        with:
          to: ${{ secrets.TG_ALERT_CHAT }}
          token: ${{ secrets.TG_ALERT_TOKEN }}
          format: markdown
          message: |
            ❌ *Pastebin Deploy Failed!*
            Branch: `${{ github.ref_name }}`
            Actor: `${{ github.actor }}`
            Project: [${{ github.repository }}](${{ github.server_url }}/${{ github.repository }})
            Target: Termux (h1 - ${{ secrets.H1_WG_HOST }})
            Workflow: [Run #${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            Check logs for details.